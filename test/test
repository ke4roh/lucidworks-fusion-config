#!/bin/bash

scriptpath="$(dirname $(readlink -f "$BASH_SOURCE"))"
config="$(readlink -f $scriptpath/../config)"

function jqreplace1() {
    local t="$(mktemp)"
    mv -f "$1" "$t"
    jq . <"$t" >"$1"
    rm -f $t
}

function testExplodeReconstitute() {
   #
   # This test will do the following:
   # 1. Unpack a test zip file into the exploded format
   # 2. Repack the exploded format into another zip file
   # 3. Assert that the two zip files have the same content, allowing for normal variations in json representation
   #
   # To do this, it makes a tmp directory and does all its work within that.  Here's the structure of that directory:
   #
   # $workdir
   #   +- apps
   #   |  +- developers  ($projdir - where test unzip goes)
   #   |  +- reference   ($reference_unzip - where the orig zip file gets unzipped)
   #   |  +- test        ($test_unzip - where the test zip file gets unzipped)
   #   +- after.zip      ($zipped_output - result of unpacking and repacking)

   local workdir="$(mktemp -d)"
   local projdir="$workdir/apps/developers"
   local test_path="$(dirname $(readlink -f "$BASH_SOURCE"))"
   local reference_zip="$test_path/resources/example1.zip"
   mkdir -p $projdir

   cp "$test_path/resources/clusters.ini" "$workdir"
   ############# Execution phase

   # Explode and reconstitute   
   cd $projdir
   cp "$test_path/resources/clusters.ini" "$workdir/."

   local zipped_output="$workdir/after.zip"

   $config unpack stage "$reference_zip" || fail "Cannot unpack" || return
   $config pack stage "$zipped_output" || fail "Cannot re-pack" || return

   ############# Evaluation phase

   # unzip both zip files and check the diffs
   # starting with the reference file
   local reference_unzip="$workdir/apps/reference"
   mkdir -p "$reference_unzip"
   cd "$reference_unzip"
   unzip -q "$reference_zip"
   jqreplace1 "$reference_unzip/objects.json"

   local test_unzip="$workdir/apps/test"
   mkdir -p "$test_unzip"
   cd "$test_unzip"
   unzip -q "$zipped_output"
   jqreplace1 "$test_unzip/objects.json"

   diffresult=$(diff -br "$reference_unzip" "$test_unzip")
   diffcode=$?
   echo "$diffresult" | head -20
   [[ "$diffcode" -eq "0" ]] || fail "Differences found.  Failing." || return

   ############ Cleanup
   cd "$test_path"
   rm -r "$workdir"
}

function testUsage() {
   $config 2>&1 >/dev/null | grep -qi "usage:" || fail "Usage not found on stderr with empty command line" || return
}

function testPackForStandalone() {
   # Pack for standalone needs to change numshards, replicationFactor and maxShardsPerNode to 1.

   local workdir="$(mktemp -d)"
   local projdir="$workdir/apps/developers"
   local test_path="$(dirname $(readlink -f "$BASH_SOURCE"))"
   local reference_zip="$test_path/resources/example1.zip"
   mkdir -p $projdir

   cp "$test_path/resources/clusters.ini" "$workdir"

   ############# Execution phase

   # Explode and reconstitute
   cd $projdir
   cp "$test_path/resources/clusters.ini" "$workdir/."

   local zipped_output="$workdir/after.zip"

   $config unpack "local" "$reference_zip" || fail "Cannot unpack" || return
   $config pack "local" "$zipped_output" || fail "Cannot re-pack" || return

   local compare_dir="$workdir/compare_dir"
   mkdir "$compare_dir"
   cd "$compare_dir"

   unzip "$zipped_output" objects.json
   jq . <objects.json >objects_new.json

   rm objects.json

   unzip "$reference_zip" objects.json
   jq . <objects.json >objects_orig.json

   ############# Evaluation phase
   # There were changes
   local nuevolines=$(diff objects_orig.json objects_new.json | grep '^>' | grep -E '"(numShards|replicationFactor|maxShardsPerNode)"\s*:' | wc -l)
   assertTrue "No changes appeared. ($nuevolines)" "[ "$nuevolines" -gt 0 ]" || { echo "$diffs" && return; }
   # Only the three values mentioned should be changed
   diff objects_orig.json objects_new.json | grep '^[><]' | grep -vE '"(numShards|replicationFactor|maxShardsPerNode)"\s*:' && { fail "An unexpected field changed" || return; }
   # All the values changed have to change to 1
   diff objects_orig.json objects_new.json | grep '^>' | grep -v ': 1\b' && { fail "Something wasn't 1 in the output" || return; }

   ############ Cleanup
   cd "$test_path"
   rm -r "$workdir"

}
# see https://github.com/kward/shunit2/
. ./shunit2
